@inject IVacancyService jobListingService
@inject IApplicationService joApplicationService
@inject SignInManager<User> signInManager
@inject UserManager<User> userManager

@namespace UI.Component
@using UI.Extensions

<div class="text-center" style="margin-top: 50px;">
	<h1 class="display-6 py-5">Переглянути за категоріями</h1>

	<div class="sector-container">
		<div class="card shadow sector-card" @onclick="() => SelectSectorAsync(Sector.FinancialActivities.GetDisplayName())">
			<img src="/img/sectors/finance.png" class="rounded border-1 p-2" />
			<h4 class="text-muted">Фінансова діяльність</h4>
		</div>
		<div class="card shadow sector-card" @onclick="() => SelectSectorAsync(Sector.InformationSystems.GetDisplayName())">
			<img src="/img/sectors/it.png" class="rounded border-1 p-2" />
			<h4 class="text-muted">Інформаційні технології</h4>
		</div>
		<div class="card shadow sector-card" @onclick="() => SelectSectorAsync(Sector.Media.GetDisplayName())">
			<img src="/img/sectors/social-media.png" class="rounded border-1 p-2" />
			<h4 class="text-muted">Медіа та інтернет</h4>
		</div>
		<div class="card shadow sector-card" @onclick="() => SelectSectorAsync(Sector.EngineeringAndProduction.GetDisplayName())">
			<img src="/img/sectors/manufacturing.png" class="rounded border-1 p-2" />
			<h4 class="text-muted">Інжиніринг та виробництво</h4>
		</div>
	</div>
</div>


<div class="text-center">
	<h1 class="display-6 py-5">Знайдіть роботу своєї мрії</h1>

	<div class="input-group mb-3">
		<select class="form-control form-control-lg" @onchange="(e) => SelectSectorAsync(e.Value.ToString())">
			@foreach(Enum value in Enum.GetValues(typeof(Sector)))
            {
                        <option>@value.GetDisplayName()</option>
                    }                    
		</select>
		<input style="width: 40%" class="form-control form-control-lg" list="datalistOptions" value="@SearchString" @onchange="SearchJobs"
			   aria-describedby="search-button" />
		<button class="btn btn-success" type="submit" id="search-button">
			<span class="oi oi-magnifying-glass"></span>
		</button>
	</div>
</div>

<div class="my-3 text-center text-muted">
	@if (String.IsNullOrEmpty(SearchString))
	{
		<div class="mt-3 d-flex justify-content-center">
			<lottie-player src="https://assets1.lottiefiles.com/private_files/lf30_KTzaOr.json" background="transparent"
					   speed="1" style="width: 300px; height: 300px;" loop autoplay>
			</lottie-player>
		</div>
	}
	else
	{
		<p>Знайдено @jobListings.Count() результатів</p>
	}
</div>


@if (loading)
{
	<Loader />
}
else
{
	foreach (var job in jobListings)
	{
		if (signInManager.IsSignedIn(principal))
		{

			<JobSearchResult job="@job" user="@principal"
				 jobApplied="joApplicationService.CheckApplication(userManager.GetUserId(principal), job.Id)" />
		}
		else
		{
			<JobSearchResult job="@job" />
		}
	}
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private IEnumerable<VacancyModel> jobListings = new List<VacancyModel>();
	private Dictionary<string, bool> verificationStatus = new Dictionary<string, bool>();

	private ClaimsPrincipal principal;
	private string SearchString;
	private bool loading = false;

	protected override async Task OnInitializedAsync()
	{
		loading = true;
		principal = (await authenticationStateTask).User;
		loading = false;
	}

	private async Task SearchJobs(ChangeEventArgs args)
	{
		loading = true;
		SearchString = args.Value.ToString();

		if (!string.IsNullOrEmpty(SearchString))
		{
			jobListings = await jobListingService.Search(SearchString);
		}
		loading = false;
	}

	private async Task SelectSectorAsync(string sector)
	{
		loading = true;
		SearchString = sector;

		if (!string.IsNullOrEmpty(SearchString))
		{
			jobListings = await jobListingService.Search(SearchString);
		}

		loading = false;
	}
}
